{"version":3,"sources":["components/ContactsList/ContactsList.module.css","transitions/pop.module.css","components/CreateContactForm/CreateContactForm.module.css","components/App/App.module.css","transitions/slide-500ms.module.css","components/Section/Section.module.css","transitions/slide.module.css","components/Filter/Filter.module.css","components/Alert/Alert.module.css","redux/contacts/contactsSelectors.js","redux/alert/alertSelectors.js","components/Section/Section.js","redux/contacts/contactsActions.js","components/ContactsList/ContactsListItem.js","components/Notification/Notification.js","components/ContactsList/ContactsList.js","components/ContactsList/ContatctsListContainer.js","components/Filter/Filter.js","components/Filter/FilterContainer.js","components/CreateContactForm/CreateContactForm.js","components/CreateContactForm/CreateContactFormContainer.js","components/Alert/Alert.js","components/App/App.js","components/App/AppContainer.js","redux/contacts/contactsReducer.js","helpers/saveLocalStorage.js","redux/alert/alertActions.js","redux/alert/alertReducer.js","helpers/Validation.js","helpers/toAddId.js","redux/middleware/validation.js","redux/store.js","index.js"],"names":["module","exports","getContacts","state","contactsList","contacts","getContactsLength","length","getFilter","filter","getFilteredContacts","createSelector","contact","name","toLowerCase","includes","alert","Section","title","children","className","titleSection","loadContacts","createAction","payload","addContact","meta","deleteContact","id","changeFilter","ContactsListItem","number","onDeleteContact","index","wrap","type","onClick","button","icon","Notification","message","ContactsList","onLoadContacts","this","props","TransitionGroup","component","list","map","CSSTransition","key","timeout","classNames","slideTransition","unmountOnExit","item","Component","connect","dispatch","contactsActions","NumberFilter","value","onChangeFilter","onChange","placeholder","event","target","Filter","TaskEditor","handleChange","setState","handleSubmit","preventDefault","onAddContact","onSubmit","form","htmlFor","CreateContactForm","Alert","p","App","addTittle","count","isAlert","styles","container","in","slideTittleTransition","popTransition","getAlert","contactsReducer","createReducer","savedContacts","localStorage","getItem","JSON","parse","error","ls","action","newContacts","setItem","stringify","filterReducer","contactsListReducer","combineReducers","toShowAlert","toHideAlert","alertReducer","INVALIDVALUE","notUnique","META","validSchema","validate","obj","schema","errorTransform","checkUnique","shortid","generate","details","incorrValue","path","some","savedContact","Joi","pattern","trim","required","validation","store","next","getState","validateRes","Validation","newAction","alertMessage","alertActions","setTimeout","configureStore","reducer","middleware","getDefaultMiddleware","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.3a02ff9a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactsList_list__2RiYd\",\"item\":\"ContactsList_item__2O7n3\",\"wrap\":\"ContactsList_wrap__2wfAx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"pop_enter__1NM7x\",\"enterActive\":\"pop_enterActive__1Bhql\",\"exit\":\"pop_exit__1_phz\",\"exitActive\":\"pop_exitActive__3xbz2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"CreateContactForm_form__1IKsq\",\"button\":\"CreateContactForm_button__v34X3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__16xz_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"slide-500ms_enter__3KjJC\",\"enterActive\":\"slide-500ms_enterActive__1PUSQ\",\"exit\":\"slide-500ms_exit__Yd33a\",\"exitActive\":\"slide-500ms_exitActive__3BQFL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"titleSection\":\"Section_titleSection__3sOBD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"slide_enter__BLs75\",\"enterActive\":\"slide_enterActive__2XArv\",\"exit\":\"slide_exit__2XvOt\",\"exitActive\":\"slide_exitActive__3LNYO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__1E5tH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"p\":\"Alert_p__3pTNQ\"};","import { createSelector } from 'reselect';\n\nexport const getContacts = state => state.contactsList.contacts;\n\nexport const getContactsLength = state => {\n    const { contacts } = state.contactsList;\n    if (!contacts) return 0;\n    return contacts.length;\n};\n\nexport const getFilter = state => state.contactsList.filter;\n\nexport const getFilteredContacts = createSelector(\n    [getContacts, getFilter],\n    (contacts, filter) => {\n        if (contacts.length <= 1) return contacts;\n        return contacts.filter(contact =>\n            contact.name.toLowerCase().includes(filter.toLowerCase()),\n        );\n    },\n);\n","export default state => state.alert;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { titleSection } from './Section.module.css';\n\nconst Section = ({ title, children }) => (\n    <section className={titleSection}>\n        <h2>{title}</h2>\n        {children}\n    </section>\n);\n\nSection.propTypes = {\n    title: PropTypes.string.isRequired,\n\n    children: PropTypes.node.isRequired,\n};\n\nexport default Section;\n","import { createAction } from '@reduxjs/toolkit';\n\nexport const loadContacts = createAction('LOADCONTACTS', () => ({\n    payload: {},\n}));\n\nexport const addContact = createAction('ADDCONTACT', contact => ({\n    payload: { contact },\n    meta: { addContact: true },\n}));\n\nexport const deleteContact = createAction('DELETECONTACT', id => ({\n    payload: { id },\n}));\n\nexport const changeFilter = createAction('CHANGEFILTER', filter => ({\n    payload: { filter },\n}));\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { icon, button, wrap } from './ContactsList.module.css';\n\nfunction ContactsListItem({ name, number, onDeleteContact, index }) {\n    return (\n        <>\n            <div>\n                <span>\n                    {index}. {name}\n                </span>\n            </div>\n            <div className={wrap}>\n                <p>{number}</p>\n                <button\n                    type=\"button\"\n                    onClick={onDeleteContact}\n                    className={button}\n                >\n                    <i className={`${icon} material-icons`}>close</i>\n                </button>\n            </div>\n        </>\n    );\n}\n\nContactsListItem.propTypes = {\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n    onDeleteContact: PropTypes.func.isRequired,\n    index: PropTypes.number.isRequired,\n};\n\nexport default ContactsListItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Notification = ({ message }) => <p>{message}!</p>;\n\nNotification.propTypes = {\n    message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\n\nimport { list, item } from './ContactsList.module.css';\nimport ContactsListItem from './ContactsListItem';\nimport Notification from '../Notification/Notification';\nimport slideTransition from '../../transitions/slide.module.css';\n\nexport default class ContactsList extends Component {\n    static propTypes = {\n        contacts: PropTypes.arrayOf(\n            PropTypes.shape({\n                id: PropTypes.string.isRequired,\n                name: PropTypes.string.isRequired,\n                number: PropTypes.string.isRequired,\n            }),\n        ).isRequired,\n        onDeleteContact: PropTypes.func.isRequired,\n        onLoadContacts: PropTypes.func.isRequired,\n    };\n\n    componentDidMount() {\n        const { onLoadContacts } = this.props;\n        onLoadContacts();\n    }\n\n    render() {\n        const { contacts, onDeleteContact } = this.props;\n        return (\n            <>\n                {contacts.length > 0 ? (\n                    <TransitionGroup component=\"ul\" className={list}>\n                        {contacts.map(({ id, name, number }, index) => (\n                            <CSSTransition\n                                key={id}\n                                timeout={300}\n                                classNames={slideTransition}\n                                unmountOnExit\n                            >\n                                <li key={id} className={item}>\n                                    <ContactsListItem\n                                        index={index + 1}\n                                        name={name}\n                                        number={number}\n                                        onDeleteContact={() =>\n                                            onDeleteContact(id)\n                                        }\n                                    />\n                                </li>\n                            </CSSTransition>\n                        ))}\n                    </TransitionGroup>\n                ) : (\n                    <Notification message=\"Contacts for query not found\" />\n                )}\n            </>\n        );\n    }\n}\n","import { connect } from 'react-redux';\n\nimport * as contactsActions from '../../redux/contacts/contactsActions';\nimport { getFilteredContacts } from '../../redux/contacts/contactsSelectors';\n\nimport ContactsList from './ContactsList';\n\nconst mapStateToProps = state => ({\n    contacts: getFilteredContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n    onDeleteContact: id => dispatch(contactsActions.deleteContact(id)),\n    onLoadContacts: () => dispatch(contactsActions.loadContacts()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsList);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { filter } from './Filter.module.css';\n\nconst NumberFilter = ({ value, onChangeFilter }) => (\n    <div className={filter}>\n        <p>Find contacts by name</p>\n        <input\n            type=\"text\"\n            value={value}\n            onChange={onChangeFilter}\n            placeholder=\"Enter name...\"\n        />\n    </div>\n);\n\nNumberFilter.propTypes = {\n    value: PropTypes.string.isRequired,\n    onChangeFilter: PropTypes.func.isRequired,\n};\n\nexport default NumberFilter;\n","import { connect } from 'react-redux';\n\nimport { changeFilter } from '../../redux/contacts/contactsActions';\nimport { getFilter } from '../../redux/contacts/contactsSelectors';\n\nimport Filter from './Filter';\n\nconst mapStateToProps = state => ({\n    value: getFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n    onChangeFilter: event => dispatch(changeFilter(event.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { form, button } from './CreateContactForm.module.css';\n\nexport default class TaskEditor extends Component {\n    static propTypes = {\n        onAddContact: PropTypes.func.isRequired,\n    };\n\n    state = {\n        name: '',\n        number: '',\n    };\n\n    handleChange = event => {\n        this.setState({ [event.target.name]: event.target.value });\n    };\n\n    handleSubmit = event => {\n        event.preventDefault();\n\n        this.props.onAddContact({ ...this.state });\n\n        this.setState({\n            name: '',\n            number: '',\n        });\n    };\n\n    render() {\n        const { name, number } = this.state;\n\n        return (\n            <form onSubmit={this.handleSubmit} className={form}>\n                <div>\n                    <label htmlFor=\"name_input\">Name</label>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Enter contact`s name\"\n                        value={name}\n                        onChange={this.handleChange}\n                        name=\"name\"\n                        id=\"name_input\"\n                    />\n                </div>\n                <div>\n                    <label htmlFor=\"number_input\">Number</label>\n                    <input\n                        type=\"number\"\n                        placeholder=\"Enter contact`s name\"\n                        value={number}\n                        onChange={this.handleChange}\n                        name=\"number\"\n                        id=\"number_input\"\n                    />\n                </div>\n                <button className={button} type=\"submit\">\n                    Add contact\n                </button>\n            </form>\n        );\n    }\n}\n","import { connect } from 'react-redux';\nimport * as contactsActions from '../../redux/contacts/contactsActions';\nimport CreateContactForm from './CreateContactForm';\n\nconst mapDispatchToProps = dispatch => ({\n    onAddContact: contact => dispatch(contactsActions.addContact(contact)),\n});\n\nexport default connect(null, mapDispatchToProps)(CreateContactForm);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { p } from './Alert.module.css';\n\nconst Alert = ({ message }) => <p className={p}>{message}!</p>;\n\nAlert.propTypes = {\n    message: PropTypes.string.isRequired,\n};\n\nexport default Alert;\n","import React, { Component } from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport PropTypes from 'prop-types';\n\nimport styles from './App.module.css';\nimport slideTittleTransition from '../../transitions/slide-500ms.module.css';\nimport popTransition from '../../transitions/pop.module.css';\n\nimport Section from '../Section/Section';\nimport ContactsList from '../ContactsList/ContatctsListContainer';\nimport Filter from '../Filter/FilterContainer';\nimport CreateContactForm from '../CreateContactForm/CreateContactFormContainer';\nimport Alert from '../Alert/Alert';\n\nexport default class App extends Component {\n    static propTypes = {\n        alert: PropTypes.string.isRequired,\n        count: PropTypes.number.isRequired,\n    };\n\n    state = {\n        addTittle: false,\n    };\n\n    componentDidMount() {\n        this.setState({\n            addTittle: true,\n        });\n    }\n\n    render() {\n        const { addTittle } = this.state;\n        const { alert, count } = this.props;\n        const isAlert = !!alert;\n\n        return (\n            <div className={styles.container}>\n                <CSSTransition\n                    in={addTittle}\n                    timeout={500}\n                    classNames={slideTittleTransition}\n                    unmountOnExit\n                >\n                    <h1>Phonebook</h1>\n                </CSSTransition>\n\n                <Section title=\"\">\n                    <CreateContactForm />\n                </Section>\n                <CSSTransition\n                    in={count >= 2}\n                    timeout={500}\n                    classNames={popTransition}\n                    unmountOnExit\n                >\n                    <Section title=\"\">\n                        <Filter />\n                    </Section>\n                </CSSTransition>\n\n                <Section title=\"\">\n                    <ContactsList />\n                </Section>\n\n                <CSSTransition\n                    in={isAlert}\n                    timeout={300}\n                    classNames={popTransition}\n                    unmountOnExit\n                >\n                    <Alert message={alert} />\n                </CSSTransition>\n            </div>\n        );\n    }\n}\n","import { connect } from 'react-redux';\n\nimport { getContactsLength } from '../../redux/contacts/contactsSelectors';\nimport getAlert from '../../redux/alert/alertSelectors';\n\nimport App from './App';\n\nconst mapStateToProps = state => ({\n    alert: getAlert(state),\n    count: getContactsLength(state),\n});\n\nexport default connect(mapStateToProps, null)(App);\n","// import { combineReducers } from 'redux';\nimport { createReducer, combineReducers } from '@reduxjs/toolkit';\nimport {\n    deleteContact,\n    loadContacts,\n    changeFilter,\n    addContact,\n} from './contactsActions';\n\n// import Type from './contactsTypes';\nimport * as ls from '../../helpers/saveLocalStorage';\n// import {\n//     toGetContacts,\n//     toAddContacts,\n//     toDeleteContacts,\n// } from '../../helpers/saveLocalStorage';\n\n// const contactsReducer = (state = [], action) => {\n//     switch (action.type) {\n//         case Type.LOADCONTACTS:\n//             return toGetContacts();\n\n//         case Type.ADDCONTACT:\n//             return toAddContacts(state, action.payload.contact);\n\n//         case Type.DELETECONTACT:\n//             return toDeleteContacts(state, action.payload.id);\n//         default:\n//             return state;\n//     }\n// };\n\nconst contactsReducer = createReducer([], {\n    [loadContacts]: () => ls.toGetContacts(),\n    [addContact]: (state, action) =>\n        ls.toAddContacts(state, action.payload.contact),\n    [deleteContact]: (state, action) =>\n        ls.toDeleteContacts(state, action.payload.id),\n});\n\n// const filterReducer = (state = '', action) => {\n//     switch (action.type) {\n//         case Type.CHANGEFILTER:\n//             return action.payload.filter;\n//         default:\n//             return state;\n//     }\n// };\n\nconst filterReducer = createReducer('', {\n    [changeFilter]: (state, action) => action.payload.filter,\n    [deleteContact]: () => '',\n});\n\nconst contactsListReducer = combineReducers({\n    contacts: contactsReducer,\n    filter: filterReducer,\n});\n\nexport default contactsListReducer;\n","export const toGetContacts = () => {\n    try {\n        const savedContacts = localStorage.getItem('contacts');\n\n        if (!savedContacts) return [];\n\n        return JSON.parse(savedContacts);\n    } catch (error) {\n        return [];\n    }\n};\n\nexport const toAddContacts = (contacts, contact) => {\n    try {\n        const newContacts = [...contacts, contact];\n        localStorage.setItem('contacts', JSON.stringify(newContacts));\n        return newContacts;\n    } catch (error) {\n        return contacts;\n    }\n};\n\nexport const toDeleteContacts = (contacts, id) => {\n    try {\n        const newContacts = contacts.filter(contact => contact.id !== id);\n        localStorage.setItem('contacts', JSON.stringify(newContacts));\n        return newContacts;\n    } catch (error) {\n        return contacts;\n    }\n};\n","import { createAction } from '@reduxjs/toolkit';\n\nexport const toShowAlert = createAction('SHOWALERT', message => ({\n    payload: { message },\n}));\nexport const toHideAlert = createAction('HIDEALERT');\n","import { createReducer } from '@reduxjs/toolkit';\nimport { toHideAlert, toShowAlert } from './alertActions';\n\nconst alertReducer = createReducer('', {\n    [toShowAlert]: (state, action) => action.payload.message,\n    [toHideAlert]: () => '',\n});\n\nexport default alertReducer;\n","import * as Joi from '@hapi/joi';\nimport toAddId from './toAddId';\n\nconst INVALIDVALUE = {\n    name:\n        'The name must contain only the letters a-z, A-C and a space, with length from 3 to 20 characters',\n    number:\n        'The number must contain only integers from 0-9, 10 characters long',\n    notUnique: 'Contact already exist!',\n};\n\nexport const META = {\n    error: 'error',\n    success: 'success',\n};\n\nconst schema = Joi.object({\n    name: Joi.string()\n        .pattern(/^[a-zA-Z ]{3,20}$/)\n        .trim()\n        .required(),\n    number: Joi.string()\n        .pattern(/^[0-9]{10}$/)\n        .required(),\n});\n\nclass Validation {\n    constructor(validSchema) {\n        this.schema = validSchema;\n    }\n\n    validate = (contacts, contact) => {\n        const { error, value } = this.schema.validate(contact);\n        if (error) {\n            return this.errorTransform(error);\n        }\n\n        const isUniqueName = this.checkUnique(contacts, contact);\n        if (isUniqueName) {\n            return { message: INVALIDVALUE.notUnique, meta: META.error };\n        }\n\n        return { contact: toAddId(value), meta: META.success };\n    };\n\n    errorTransform = error => {\n        if (error.details[0].type === 'string.empty') {\n            return { message: error.message, meta: META.error };\n        }\n        const incorrValue = error.details[0].path[0];\n\n        return { message: INVALIDVALUE[incorrValue], meta: META.error };\n    };\n\n    checkUnique = (contacts, contact) => {\n        return contacts.some(\n            savedContact =>\n                savedContact.name.toLowerCase() === contact.name.toLowerCase(),\n        );\n    };\n}\n\nexport default new Validation(schema);\n","import shortid from 'shortid';\n\nexport default obj => {\n    return {\n        ...obj,\n        id: shortid.generate(),\n    };\n};\n","import * as alertActions from '../alert/alertActions';\nimport Validation, { META } from '../../helpers/Validation';\nimport { getContacts } from '../contacts/contactsSelectors';\n\nconst validation = store => next => action => {\n    if (action.meta && action.meta.addContact) {\n        const state = store.getState();\n        const contacts = getContacts(state);\n        const { contact } = action.payload;\n        const validateRes = Validation.validate(contacts, contact);\n\n        if (validateRes.meta === META.success) {\n            const newAction = {\n                ...action,\n                payload: { contact: validateRes.contact },\n            };\n\n            next(newAction);\n        }\n        const alertMessage = validateRes.message ? validateRes.message : '';\n\n        store.dispatch(alertActions.toShowAlert(alertMessage));\n\n        setTimeout(() => {\n            store.dispatch(alertActions.toHideAlert());\n        }, 3000);\n        return;\n    }\n\n    next(action);\n};\n\nexport default validation;\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\n\nimport contactsListReducer from './contacts/contactsReducer';\nimport alertReducer from './alert/alertReducer';\n\nimport validation from './middleware/validation';\n\nconst store = configureStore({\n    reducer: {\n        contactsList: contactsListReducer,\n        alert: alertReducer,\n    },\n    middleware: [...getDefaultMiddleware(), validation],\n});\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'material-design-icons/iconfont/material-icons.css';\n\nimport { Provider } from 'react-redux';\nimport App from './components/App/AppContainer';\nimport store from './redux/store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.querySelector('#root'),\n);\n"],"sourceRoot":""}